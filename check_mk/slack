#!/usr/bin/python
# CMK-Slack Websocket integration
# Rob M-B 2015
# Paul K 2019-03-01

import os
import requests
import json

# Change this to the incoming webhook URL from Mattermost
slack_path = "<webhook_path>"
slack_domain = "<slack_mattermost_base_url>"
if "NOTIFY_PARAMETER_1" in os.environ:
    channel = "#" + os.environ['NOTIFY_PARAMETER_1']
else:
    channel = '#monitoring'
bot_name = "CMKBot"

# Probably better to leave the stuff below well alone
headers = {"Content-type": "application/json", "Accept": "text/plain"}
message = "*" + os.environ['NOTIFY_NOTIFICATIONTYPE'] + "* "
plaintext = message
message += "\n" + os.environ['NOTIFY_HOSTNAME'] + " "
plaintext += os.environ['NOTIFY_HOSTNAME'] + " "
# for now avoid separate styles for notifications services or hosts. though they would make the code more correct
color_emoji_json = """{
    "_comment": "NOTIFY_NOTIFICATIONTYPE",
    "DOWNTIMESTART": { "color": "#439FE0", "emoji": ":moon:" },
    "DOWNTIMEEND": { "color": "#33cccc", "emoji": ":sunrise:" },
    "ACKNOWLEDGEMENT": { "color": "#8f006b", "emoji": ":flags:" },
    "_comment": "NOTIFY_SERVICESTATE",
    "CRITICAL": { "color": "danger", "emoji": ":fire:" },
    "WARNING": { "color": "warning", "emoji": ":warning:" },
    "UNKNOWN": { "color": "#cccccc", "emoji": ":question:" },
    "OK": { "color": "good", "emoji": ":ok:" },
    "_comment": "NOTIFY_HOSTSTATE warning and unknown already defined will reuse for consistence",
    "DOWN": { "color": "danger", "emoji": ":fire:" },
    "UP": { "color": "good", "emoji": ":ok:" },
    "_comment": "when we can not find a matching style",
    "praseerror": { "color": "#aaaaaa", "emoji": ":octocat:" }
}"""

alert_context = {}


def event_style():
    styles = json.loads(color_emoji_json)
    if 'NOTIFY_NOTIFICATIONTYPE' in os.environ:
        if os.environ['NOTIFY_NOTIFICATIONTYPE'] in styles: return styles[os.environ['NOTIFY_NOTIFICATIONTYPE']]
    else:
        return styles['parseerror']  # error missing NOTIFY_NOTIFICATIONTYPE
    if 'NOTIFY_WHAT' in os.environ:
        if os.environ['NOTIFY_WHAT'] == 'SERVICE':
            if 'NOTIFY_SERVICESTATE' in os.environ:
                if os.environ['NOTIFY_SERVICESTATE'] in styles:
                    return styles[os.environ['NOTIFY_SERVICESTATE']]
                else:
                    return styles['parseerror']  # error unknown NOTIFY_SERVICESTATE
            else:
                return styles['parseerror']  # error missing NOTIFY_SERVICESTATE
        else:  # assuming host
            if 'NOTIFY_HOSTSTATE' in os.environ:
                if os.environ['NOTIFY_HOSTSTATE'] in styles:
                    return styles[os.environ['NOTIFY_HOSTSTATE']]
                else:
                    return styles['parseerror']  # error unknown NOTIFY_HOSTSTATE
            else:
                return styles['parseerror']  # error missing NOTIFY_SERVICESTATE
    else:
        return styles['parseerror']  # error missing NOTIFY_WHAT
    # should never get here but better to send a message than miss due to lack of style
    return styles['parseerror']


# here lies service actions
if os.environ['NOTIFY_WHAT'] == 'SERVICE':
    message += "  " + os.environ['NOTIFY_SERVICEDESC'] + " is *"
    plaintext += os.environ['NOTIFY_SERVICEDESC'] + " - *"
    message += os.environ['NOTIFY_SERVICESTATE'] + "* \n"
    message += os.environ['NOTIFY_SERVICEOUTPUT'] + " \n"
    if 'NOTIFY_SERVICEACKCOMMENT' in os.environ:
        message += os.environ['NOTIFY_SERVICEACKCOMMENT']
    plaintext += os.environ['NOTIFY_SERVICESTATE'] + "* - "
    plaintext += os.environ['NOTIFY_SERVICEOUTPUT']
    if os.environ['NOTIFY_NOTIFICATIONAUTHOR'] != '':
        message += "\nTriggered by *" + os.environ['NOTIFY_NOTIFICATIONAUTHOR'] + "* - _" + os.environ[
            'NOTIFY_NOTIFICATIONCOMMENT'] + "_"
    if os.environ['NOTIFY_NOTIFICATIONTYPE'] == 'ACKNOWLEDGEMENT':
        plaintext += " - " + os.environ['NOTIFY_SERVICEACKCOMMENT']
    if os.environ['NOTIFY_SERVICESTATE'] != 'OK':
        alert_context = {"host": os.environ['NOTIFY_HOSTNAME'], "service": os.environ['NOTIFY_SERVICEDESC']}

# otherwise, it's a host
else:
    message += "is *" + os.environ['NOTIFY_HOSTSTATE'] + "* "
    plaintext += "is *" + os.environ['NOTIFY_HOSTSTATE'] + "* - "
    if 'NOTIFY_HOSTACKCOMMENT' in os.environ:
        message += os.environ['NOTIFY_HOSTACKCOMMENT']
    if os.environ['NOTIFY_NOTIFICATIONAUTHOR'] != '':
        message += "\nTriggered by *" + os.environ['NOTIFY_NOTIFICATIONAUTHOR'] + "* - _" + os.environ[
            'NOTIFY_NOTIFICATIONCOMMENT'] + "_"
    if os.environ['NOTIFY_HOSTSTATE'] != 'UP':
        alert_context = {"host": os.environ['NOTIFY_HOSTNAME'], "service": ""}
event_style = event_style()
# and this is us flinging off the message
attachment = {
    "fallback": plaintext,
    "color": event_style['color'],
    "text": message,
    "mrkdwn_in": ["text"],
}
if alert_context:
    attachment["actions"] = [{
        "name": "Acknowledge",
        "integration": {
                "url": slack_domain + "/plugins/au.com.slicedtech.chat.checkmk/api/v1/cmk/1/ack",
                "context": alert_context
        }}]

data = {"channel": channel, "username": bot_name, "attachments": [attachment], "icon_emoji": event_style['emoji']}
headers = {'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 '
                         '(KHTML, like Gecko) Chrome/61.0.3163.100 Safari/537.36'}
conn = requests.post(slack_domain + slack_path, data=json.dumps(data), headers=headers)
print(conn.status_code)
